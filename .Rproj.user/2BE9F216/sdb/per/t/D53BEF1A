{
    "collab_server" : "",
    "contents" : "#' Estimating Covariance Matrix with automatic tuning\n#'\n#' In this variant of \\code{\\link{CovEst}}, we implemented automatic parameter tuning scheme\n#' applying 2-fold cross validation repeatedly and choosing the minimal one with the least discrepancy.\n#'\n#' @param X an \\code{(n-by-p)} matrix where each row is an observation from the first dataset.\n#' @param method a name of estimation method.\n#' @param opt a list of options containing following fields: \\describe{\n#' \\item{nCV}{the number for repetitions for 2-fold random cross validation.}\n#' \\item{nsearch}{the number of trials on range of regularization parameters.}\n#' }\n#' @param parallel a logical; \\code{TRUE} to use half of available cores, \\code{FALSE} to do every computation sequentially.\n#'\n#'\n#' @return a named list containing: \\describe{\n#' \\item{S}{a \\code{(p-by-p)} covariance matrix estimate.}\n#' \\item{CV}{a dataframe containing vector of tested threshold values(\\code{thr}) and corresponding cross validation scores(\\code{CVscore}).}\n#' }\n#'\n#' @examples\n#' \\dontrun{\n#' ## generate data from multivariate normal with Identity covariance.\n#' data = mvtnorm::rmvnorm(100, sigma=diag(5))\n#'\n#' ## run automatic estimation\n#' sopt = list(nCV=2,nsearch=3) # common option\n#' out1 = CovEst.auto(data, method=\"Bickel08\", opt=sopt)\n#' out2 = CovEst.auto(data, method=\"Cai11\",    opt=sopt)\n#'\n#' ## Visualize\n#' par(mfrow=c(1,3))\n#' image(pracma::flipud(diag(5)),main=\"Original Covariance\")\n#' image(pracma::flipud(out1$S), main=\"Bickel08\")\n#' image(pracma::flipud(out2$S), main=\"Cai11\")\n\n#' }\n#'\n#' @references [Cai11] Cai, T. and Liu, W. (2011) \\emph{Adaptive Thresholding for Sparse Covariance Matrix Estimation.} Journal of the American Statistical Association, Vol.106:672-684.\n#' @references [Donoho95] Donoho, D. et al. (1995) \\emph{Wavelet Shrinkage: Asymptopia?} Journal of the Royal Statistical Society Series B, Vol.57(2):301-369.\n#' @references [Fan13] Fan. J. et al. (2013) \\emph{Large covariance estimation by thresholding principal orthogonal complements.}\n#' Journal of the Royal Statistical Society Series B, Vol.75(4):603-680.\n#' @references [Qi06] Qi, H. and Sun, D. (2006) \\emph{A Quadratically Convergent Newton Method for Computing the Nearest Correlation Matrix.} SIAM J.Matrix Anal.& Appl., Vol.28(2):360-385.\n#'\n#'\n#' @seealso \\code{\\link{CovEst}}\n#' @export\nCovEst.auto <- function(X, method=c(\"Bickel08\",\"Cai11\",\"Donoho95\",\"Fan13\",\"Qi06\"),opt=list(nCV=10,nsearch=10),parallel=FALSE){\n  ## PREPROCESSING ON INPUTS AND PARAMETERS\n  # 1. valid data matrix\n  if (!check_datamatrix(X)){stop(\"* CovEst.auto : an input data matrix X is invalid.\")}\n  if ((nrow(X)==1)||(ncol(X)==1)){stop(\"* CovEst.auto : invalid input matrix X.\")}\n  # 2. method : THIS SHOULD BE UPDATED EVERYTIME A METHOD IS ADDED\n  if (missing(method)){method=\"Bickel08\"} else {\n    method = match.arg(method)\n  }\n\n  ## Parameter Checking from Option\n  if (!missing(opt)){\n    # 1. nCV : cross validation numerics\n    if (\"nCV\" %in% names(opt)){\n      nCV = opt$nCV\n      if ((length(nCV)!=1)||(!is.numeric(nCV))||(nCV<1)||(nCV>nrow(X))||is.na(nCV)||(abs(nCV-round(nCV))>sqrt(.Machine$double.eps))){\n        stop(\"* CovEst.auto : opt$nCV parameter is not valid.\")\n      }\n      nCV = round(nCV)\n    } else {nCV = round(10) }\n    # 2. nsearch : grid generation\n    if (\"nsearch\" %in% names(opt)){\n      nsearch = opt$nsearch\n      if ((length(nsearch)!=1)||(!is.numeric(nsearch))||(nsearch<1)||(nsearch>nrow(X))||is.na(nsearch)||(abs(nsearch-round(nsearch))>sqrt(.Machine$double.eps))){\n        stop(\"* CovEst.auto : opt$nsearch parameter is not valid.\")\n      }\n      nsearch = round(nsearch)\n    } else {\n      nsearch = round(10)\n    }\n  } else { # missing cases\n    nCV = round(10)\n    nsearch = round(10)\n  }\n\n\n\n\n\n  ## Parallel Setting\n  if (!parallel){nCore = 1  }\n  else {nCore = max(round(detectCores()/2),1)}\n\n  ## Main Computation\n  output = switch(method,\n                  Donoho95 = covest.Donoho95(X,nCV,nCore,nsearch),\n                  Fan13    = covest.Fan13(X,nCV,nCore,nsearch),\n                  Qi06     = covest.Qi06(X)\n  )\n  ## RETURN OUTPUT\n  return(output)\n}\n",
    "created" : 1513109947730.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1397499962",
    "id" : "D53BEF1A",
    "lastKnownWriteTime" : 1513286571,
    "last_content_update" : 1513286571987,
    "path" : "~/Desktop/CovTools/R/CovEst.auto.R",
    "project_path" : "R/CovEst.auto.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}