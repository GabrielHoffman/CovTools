par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=0.5")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=0.9")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
out4$CV
library(CovTools)
?CovEst.Cai11
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.Bickel08(data, thr=0.1, parallel=TRUE)  # threshold value 0.1
out2 <- CovEst.Bickel08(data, thr=1, parallel=TRUE)    # threshold value 1
out3 <- CovEst.Bickel08(data, thr=10, parallel=TRUE)   # threshold value 10
out4 <- CovEst.Bickel08(data, thr=mthr, parallel=TRUE) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
library(CovTools)
library(CovTools)
out4 <- CovEst.Bickel08(data, thr=mthr) # automatic threshold checking
out4 <- CovEst.Bickel08(data, thr=mthr, parallel=TRUE) # automatic threshold checking
out4
library(CovTools)
A = matrix(rnorm(100*6),nrow=100)
cov(A)
library(CovTools)
library(CovTools)
?CovEst.Donoho95
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- seq(from=0.01,to=0.99,length.out=10)
out1 <- CovEst.Cai11(data, thr=mthr)
out2 <- CovEst.Cai11(data, thr=mthr, parallel=TRUE)
out1$CV
out2$CV
library(CovTools)
out1 <- CovEst.Donoho95(data, thr=mthr)
library(CovTools)
out1 <- CovEst.Donoho95(data, thr=mthr)
out2 <- CovEst.Donoho95(data, thr=mthr, parallel=TRUE)
out1
out2
out1$CV
out2$CV
out3 = CovEst.Donoho95(X, thr=0.5, parallel=TRUE)
out3 = CovEst.Donoho95(data, thr=0.5, parallel=TRUE)
out4 = CovEst.Donoho95(data, thr=0.5, parallel=FALSE)
out3
out4
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
out = CovEst.adaptive(data,thr=mthr)
func_hard <- function(X, thr){
#   1. compute S and diagonal term
S     = cov(X)
diagS = diag(S)
#   2. adjust
S[which(abs(S)<=thr)] = 0
diag(S) = diagS
#   3. return output
return(S)
}
S1 = func_hard(data,0.1)
dim(S1)
S1 = func_hard(data,0.1)
S2 = func_hard(data,1)
S1
S2
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
image(out1$S)
image(out2$S)
image(out3$S)
library(CovTools)
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
library(CovTools)
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
library(CovTools)
## generate data from multivariate normal with Identity covariance.
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
out1$S
library(CovTools)
rm(list=ls())
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
out4$CV
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=mthr) # threshold value 10
out4 <- CovEst.hard(data, thr=mthr, parallel=TRUE) # parallelize
out3 <- CovEst.hard(data, thr=mthr) # threshold value 10
out4 <- CovEst.hard(data, thr=mthr, parallel=TRUE) # parallelize
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
## generate data from multivariate normal with Identity covariance.
data <- mvtnorm::rmvnorm(100, sigma=diag(5))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
S = cov(data)
S = cov(x)
S = cov(X)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
S = cov(data)
ds = diag(S)
C = cor(data)
Ctmp = diag(1/sqrt(ds))%*%S%*%diag(1/sqrt(ds))
norm(C-Ctmp,"f")
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- seq(from=0.01,to=0.99,length.out=10)
out1 <- CovEst.adaptive(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.adaptive(data, thr=0.5)  # threshold value 0.5
out3 <- CovEst.adaptive(data, thr=0.5)  # threshold value 0.9
out4 <- CovEst.adaptive(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=0.5")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=0.9")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
## generate data from multivariate normal with Identity covariance.
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
outH = CovEst.hard(data, thr=mthr, parallel=TRUE)
outA = CovEst.adaptive(data, thr=mthr, parallel=TRUE)
outH$CV
outA$CV
?pmax
library(CovTools)
?nearPD
A = cov(data)
require(Matrix)
rankMatrix(A)
dim(data)
eigen(A)$values
data = matrix(rnorm(2*8),nrow=2)
A = cov(data)
eigen(A)$values
rankMatrix(A)
?nearest_spd
library(CovTools)
outdata = CovEst.nearPD(data)
Rhat = Matrix::nearPD(cov(data), corr=TRUE)
Rhat$mat
library(CovTools)
outdata = CovEst.nearPD(data)
SS = outdata$S
image(SS)
SS
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
outdata = CovEst.nearPD(data)
image(outdata$S)
rankMatrix(outdata$S)
data = t(data)
outdata = CovEst.nearPD(data)
rank(outdata$S)
rankMatrix(outdata$S)
image(outdata$S)
rm(list=ls())
dim(A)
A = cov(data)
A = matrix(rnorm(100*10),nrow=100)
X = cov(A)
x = eigen(X, only.values = TRUE)$values
min(x)
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
graphics.off(); par(mfrow=c(1,2))
image(out$S)
image(cov(X))
image(cov(data))
image(out$S)
data = t(data)
out = CovEst.hardPD(data)
image(out$S)
image(cov(data))
out$optC
library(CovTools)
library(CovTools)
rm(list=ls())
graphics.off()
library(CovTools)
ls("package:CovTools")
library(CovTools)
?CovEst.soft
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
data <- mvtnorm::rmvnorm(2, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
dim(data)
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
library(CovTools)
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(11, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.soft(data, thr=1)    # threshold value 1
out3 <- CovEst.soft(data, thr=10)   # threshold value 10
library(CovTools)
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.soft(data, thr=1)    # threshold value 1
library(CovTools)
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
library(CovTools)
data <- mvtnorm::rmvnorm(7, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
library(CovTools)
data <- mvtnorm::rmvnorm(7, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
library(CovTools)
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
library(CovTools)
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.nearPD(data) # nearPD
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
library(CovTools)
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
out2$S
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
require(Matrix)
rankMatrix(out2$S)
rankMatrix(ou1)
rankMatrix(out1)
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
out4$optC
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
mmesage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
mmesage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
## visualize 4 estimated matrices
mmessage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
?paste
mmessage <- paste("hardPD::optimal thr=",sprintf("%.2f",out4$optC),sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
