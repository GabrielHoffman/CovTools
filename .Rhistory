SS = outdata$S
image(SS)
SS
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
outdata = CovEst.nearPD(data)
image(outdata$S)
rankMatrix(outdata$S)
data = t(data)
outdata = CovEst.nearPD(data)
rank(outdata$S)
rankMatrix(outdata$S)
image(outdata$S)
rm(list=ls())
dim(A)
A = cov(data)
A = matrix(rnorm(100*10),nrow=100)
X = cov(A)
x = eigen(X, only.values = TRUE)$values
min(x)
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
library(CovTools)
out = CovEst.hardPD(data)
graphics.off(); par(mfrow=c(1,2))
image(out$S)
image(cov(X))
image(cov(data))
image(out$S)
data = t(data)
out = CovEst.hardPD(data)
image(out$S)
image(cov(data))
out$optC
library(CovTools)
library(CovTools)
rm(list=ls())
graphics.off()
library(CovTools)
ls("package:CovTools")
library(CovTools)
?CovEst.soft
library(CovTools)
data <- mvtnorm::rmvnorm(100, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
data <- mvtnorm::rmvnorm(2, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
dim(data)
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
library(CovTools)
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(11, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.soft(data, thr=1)    # threshold value 1
out3 <- CovEst.soft(data, thr=10)   # threshold value 10
library(CovTools)
data <- mvtnorm::rmvnorm(9, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.soft(data, thr=1)    # threshold value 1
library(CovTools)
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
library(CovTools)
data <- mvtnorm::rmvnorm(7, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.soft(data, thr=0.1)  # threshold value 0.1
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
library(CovTools)
data <- mvtnorm::rmvnorm(7, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
library(CovTools)
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## apply 4 different schemes
#  mthr is a vector of regularization parameters to be tested
mthr <- exp(seq(from=log(0.1),to=log(10),length.out=10))
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hard(data, thr=mthr) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
library(CovTools)
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.nearPD(data) # nearPD
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="automatic")
library(CovTools)
data <- mvtnorm::rmvnorm(10, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
out2$S
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
data <- mvtnorm::rmvnorm(3, sigma=diag(10))
## compare against sample covariance
out1 <- cov(data)
out2 <- CovEst.nearPD(data) # apply nearPD
## visualize 2 estimated matrices
par(mfrow=c(1,2), pty="s")
image(pracma::flipud(out1), col=gray((0:100)/100), main="sample covariance")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="nearPD")
require(Matrix)
rankMatrix(out2$S)
rankMatrix(ou1)
rankMatrix(out1)
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main="PD constraint")
out4$optC
data <- mvtnorm::rmvnorm(5, sigma=diag(10))
## apply 4 different schemes
out1 <- CovEst.hard(data, thr=0.1)  # threshold value 0.1
out2 <- CovEst.hard(data, thr=1)    # threshold value 1
out3 <- CovEst.hard(data, thr=10)   # threshold value 10
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
mmesage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
out4 <- CovEst.hardPD(data) # automatic threshold checking
## visualize 4 estimated matrices
mmesage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
## visualize 4 estimated matrices
mmessage <- paste("hardPD::optimal thr=",out4$optC,sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
?paste
mmessage <- paste("hardPD::optimal thr=",sprintf("%.2f",out4$optC),sep="")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(out1$S), col=gray((0:100)/100), main="thr=0.1")
image(pracma::flipud(out2$S), col=gray((0:100)/100), main="thr=1")
image(pracma::flipud(out3$S), col=gray((0:100)/100), main="thr=10")
image(pracma::flipud(out4$S), col=gray((0:100)/100), main=mmessage)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
method = c("fixed",1.0)
typeof(method)
class(method)
is.vector(method)
method[1]
method = c("fixed",c(1.0,2.0,3.0))
method
method=list(type="fixed",param=1.0)
length(method)
library(CovTools)
data = mvtnorm::rmvnorm(100, sigma=diag(10))
out1 = PreEst.glasso(data, method=list(type="fixed",param=1.0))
out2 = PreEst.glasso
out2 = PreEst.glasso(data, method=list(type="fixed",param=c(1,2,3,4,5,6,7,8,9,10)))
out1
out2
list
method
missing(method$hello)
x = c("a","b")
y = c("b","a")
(x==y)
sort(x)
(sort(x)==sort(y))
library(CovTools)
out1 = PreEst.glasso(data)
method
(sort(names(method))==sort(c("type","param")))
library(CovTools)
out1 = PreEst.glasso(data)
out2 = PreEst.glasso(data,method=list(type="fixed",param=c(1,2,3)))
out2 = PreEst.glasso(data,method=list(type="BIC",param=1))
out2 = PreEst.glasso(data,method=list(type="BIC",param=c(1,2,3,4,5,6)))
out3 = PreEst.glasso(data,method=list(type="confidence",0))
out3 = PreEst.glasso(data,method=list(type="confidence",param=0))
out3 = PreEst.glasso(data,method=list(type="confidence",param=1))
out3 = PreEst.glasso(data,method=list(type="confidence",param=Inf))
out3 = PreEst.glasso(data,method=list(type="confidence",param=0.95))
par(mfrow(c(1,3)))
par(mfrow=c(1,3))
image(out1$C)
image(out2$C)
image(out3$C)
names(out1)
names(out2)
names(out3)
out2 = PreEst.glasso(data,method=list(type="BIC",param=c(1,2,3,4,5,6)))
out2 = PreEst.glasso(data,method=list(type="BIC",param=c(1,2,3,4,5,6)),parallel=TRUE)
out2_1 = PreEst.glasso(data,method=list(type="BIC",param=c(1,2,3,4,5,6)),parallel=TRUE)
out2_2 = PreEst.glasso(data,method=list(type="BIC",param=c(1,2,3,4,5,6)),parallel=FALSE)
graphics.off()
out2_1$BIC
out2_2$BIC
library(CovTools)
library(CovTools)
library(CovTools)
pack =
"CovTools"
pack
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(CovTools)
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
out2$BIC
library(CovTools)
## generate data from multivariate normal with Identity precision.
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## prepare input arguments for diefferent scenarios
lbdvec <- c(0.01,0.1,1,10,100)         # a vector of regularization parameters
list1 <- list(type="fixed",param=1.0)  # single regularization parameter case
list2 <- list(type="confidence",param=0.95) # single confidence level case
list3 <- list(type="BIC",param=lbdvec) # multiple regularizers with BIC selection
## compute with different scenarios
out1 <- PreEst.glasso(data, method=list1)
out2 <- PreEst.glasso(data, method=list2)
out3 <- PreEst.glasso(data, method=list3)
## visualize
par(mfrow=c(2,2))
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="glasso::lambda=1.0")
image(pracma::flipud(out2$C), main="glasso::Confidence=0.95")
image(pracma::flipud(out3$C), main="glasso::BIC selection")
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="glasso::lambda=1.0")
image(pracma::flipud(out2$C), main="glasso::Confidence=0.95")
image(pracma::flipud(out3$C), main="glasso::BIC selection")
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(CovTools)
rm(list=ls())
## generate data from multivariate normal with Identity precision.
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## prepare input arguments for diefferent scenarios
lbdvec <- c(0.01,0.1,1,10,100)         # a vector of regularization parameters
list1 <- list(type="fixed",param=1.0)  # single regularization parameter case
list2 <- list(type="confidence",param=0.95) # single confidence level case
list3 <- list(type="BIC",param=lbdvec) # multiple regularizers with BIC selection
## compute with different scenarios
out1 <- PreEst.glasso(data, method=list1)
out2 <- PreEst.glasso(data, method=list2)
out3 <- PreEst.glasso(data, method=list3)
## visualize
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="glasso::lambda=1.0")
image(pracma::flipud(out2$C), main="glasso::Confidence=0.95")
image(pracma::flipud(out3$C), main="glasso::BIC selection")
rm(list=ls())
## generate data from multivariate normal with Identity precision.
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## prepare input arguments for diefferent scenarios
lbdvec <- c(0.01,0.1,1,10,100)         # a vector of regularization parameters
list1 <- list(type="fixed",param=1.0)  # single regularization parameter case
list2 <- list(type="confidence",param=0.95) # single confidence level case
list3 <- list(type="BIC",param=lbdvec) # multiple regularizers with BIC selection
## compute with different scenarios
out1 <- PreEst.glasso(data, method=list1, parallel=TRUE)
out2 <- PreEst.glasso(data, method=list2, parallel=TRUE)
out3 <- PreEst.glasso(data, method=list3, parallel=TRUE)
## visualize
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="glasso::lambda=1.0")
image(pracma::flipud(out2$C), main="glasso::Confidence=0.95")
image(pracma::flipud(out3$C), main="glasso::BIC selection")
library(CovTools)
out = PreEst.banded1(data)
names(out)
graphics.off()
image(out$C)
library(CovTools)
library(CovTools)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
data1 = mvtnorm::rmvnorm(100, sigma=diag(5))
data2 = mvtnorm::rmvnorm(200, sigma=diag(5))
## run test
CovTest2(data1, data2)
library(CovTools)
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## compare different K
out1 <- PreEst.banded1(data, upperK=1)
out2 <- PreEst.banded1(data, upperK=3)
out3 <- PreEst.banded1(data, upperK=5)
## visualize
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="banded1::upperK=1")
image(pracma::flipud(out2$C), main="banded1::upperK=3")
image(pracma::flipud(out3$C), main="banded1::upperK=5")
## generate data from multivariate normal with Identity precision.
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## compare different K
out1 <- PreEst.banded2(data, upperK=1)
out2 <- PreEst.banded2(data, upperK=3)
out3 <- PreEst.banded2(data, upperK=5)
## visualize
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="banded2::upperK=1")
image(pracma::flipud(out2$C), main="banded2::upperK=3")
image(pracma::flipud(out3$C), main="banded2::upperK=5")
## generate data from multivariate normal with Identity precision.
data = mvtnorm::rmvnorm(100, sigma=diag(10))
## compare different K
out1 <- PreEst.banded2(data, upperK=1)
out2 <- PreEst.banded2(data, upperK=3)
out3 <- PreEst.banded2(data, upperK=5)
## visualize
par(mfrow=c(2,2), pty="s")
image(pracma::flipud(diag(10)),main="Original Precision")
image(pracma::flipud(out1$C), main="banded2::upperK=1")
image(pracma::flipud(out2$C), main="banded2::upperK=3")
image(pracma::flipud(out3$C), main="banded2::upperK=5")
library(CovTools)
?PreEst.banded1
library(CovTools)
library(CovTools)
library(CovTools)
A = diag(5)
image(A)
image(A[,5:1])
library(CovTools)
library(CovTools)
?`CovTools-package`
?`CovTools-package`
library(CovTools)
?`CovTools-package`
library(CovTools)
?`CovTools-package`
library(CovTools)
?`CovTools-package`
library(CovTools)
?`CovTools-package`
library(CovTools)
library(CovTools)
library(CovTools)
library(CovTools)
?`CovTools-package`
